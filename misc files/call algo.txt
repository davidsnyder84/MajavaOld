
process of calling


tile q is discarded by another player
q is sent to player p, so that p can react to it

checks if p can chiL, chiM, chiH, pon, and kan the tile.
if (p can make call X on the tile)
	//canMakeCallX and partnerIndicesForCallX are managed in the hand class
	the boolean for "canMakeCallX" is set to true (in the player's hand)
	the list "partnerIndicesForCallX" contains the indices of the hand tiles that will make the meld with q
end if


//At this point, we have:
	boolean flag for each call, indicates whether or not it is possible
	for each possible call, we have a list of the hand indices to make that call
	
we know:
	is it possible?
	the indices of the tiles to use in the meld
	
	
So, we need to:
	create a new meld out of the list indices and q
	remove the indices from the hand
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
From handleReaction notes

/*
	method: handleReaction
	handles a call made on a discarded tile
	
	input: t is the discarded tile
	
	
	callingPlayer = figure out who made the call (decide priority if >1 calls)
	handle the call
	show the result of the call
	
	whoseTurn = the player who made the call's turn
	reaction = NO_REACTION
	*/
	private void handleReaction(Tile discardedTile){
		
		//figure out who called the tile
		Player priorityCaller = whoCalled();
		
		
		//at this point, the tile can definitely make a meld in the player's hand
		//the player has said "yes, I want this tile in this meld specifically"
		//the type of meld is known
		//validity check has already been done
		//just need to make the meld
		
		
		//at this point, the tile can definitely make a meld in the player's hand
		//the player has either answered "no", or answered "make call X"
		//the type of meld X is known, and it is valid/possible (checks have already been done)
		//
		//know the indices of the tiles to make the meld with
		//need to: make the meld with the indices + q
		//		   remove the indices from the hand
		
		
		
		//if the player called Ron, handle that
		if (priorityCaller.checkCallStatus() == Player.CALLED_RON)
		{
			System.out.println("\n*****RON! RON RON! RON! RON! ROOOOOOOOOOOOOOOOOOOOOON!");
		}
		else
		{
			//make the meld
			priorityCaller.makeMeld(discardedTile);

			//show who called the tile 
			System.out.println("\n*********************************************************");
			System.out.println("**********" + priorityCaller.getSeatWind() + " Player called the tile (" + discardedTile.toString() + ")! " + p1.checkCallStatusString() + "!!!**********");
			System.out.println("*********************************************************\n");
		}
		//meld has been made
		
		

		//show who made the call (todo: tell who got priority bumped when multiple calls happen)
		//System.out.println("*****Well gosh, it looks like somebody called tile " + discardedTile.toString() + "!");
		
		//if multiple players called, show if someone got outprioritized 
		if (p1.called() && p1 != priorityCaller){
			System.out.println("~~~~~" + p1.getSeatWind() + " Player tried to call " + p1.checkCallStatusString() + ", but got bumped by " + priorityCaller.getSeatWind() + "!");
		}
		if (p2.called() && p2 != priorityCaller){
			System.out.println("~~~~~" + p2.getSeatWind() + " Player tried to call " + p2.checkCallStatusString() + ", but got bumped by " + priorityCaller.getSeatWind() + "!");
		}
		if (p3.called() && p3 != priorityCaller){
			System.out.println("~~~~~" + p3.getSeatWind() + " Player tried to call " + p3.checkCallStatusString() + ", but got bumped by " + priorityCaller.getSeatWind() + "!");
		}
		if (p4.called() && p4 != priorityCaller){
			System.out.println("~~~~~" + p4.getSeatWind() + " Player tried to call " + p4.checkCallStatusString() + ", but got bumped by " + priorityCaller.getSeatWind() + "!");
		}
		
		
		
		//it is now the calling player's turn
		mWhoseTurn = priorityCaller.getPlayerNumber();
		
		
		//reset reaction to none (since reaction has been handled)
		mReaction = NO_REACTION;
	}
	
	
	
	
	
	
	
	
	
	




