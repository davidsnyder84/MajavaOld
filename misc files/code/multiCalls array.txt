/*			Player topPriority = null;			ArrayList<Player> callers = new ArrayList<Player>(3);						if (p1.called() && p1.checkCallStatus() != Player.CALLED_CHI)				callers.add(p1);			if (p2.called() && p2.checkCallStatus() != Player.CALLED_CHI)				callers.add(p2);			if (p3.called() && p3.checkCallStatus() != Player.CALLED_CHI)				callers.add(p3);			if (p4.called() && p4.checkCallStatus() != Player.CALLED_CHI)				callers.add(p4);						//if only 1 chi and 1 pon/kan, or 1 chi and 1 ron, the pon/kan/ron gets higher priority   			if (callers.size() == 1)				topPriority = callers.get(0);			else			{				//else, it means 1pon1ron, 1pon2ron, 2ron, or 3ron				//get rid of the pon, leaving 1ron, 2ron, or 3ron				int i;				for (i = 0; i < callers.size(); i++)					if (callers.get(i).checkCallStatus() == Player.CALLED_PON || callers.get(i).checkCallStatus() == Player.CALLED_KAN)						callers.remove(i);								//the pon is removed, so now the list is either 1ron, 2ron, or 3ron				//the first ron in the list gets the priority (because their seat wind is closer to the discarder's seat wind)				topPriority = callers.get(0);							}			*/