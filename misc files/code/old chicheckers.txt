	/*
	private method: __canChiType
	checks if a chi can be made with the new tile
	
	input: chiType is the type of chi to check (ChiL, ChiM, ChiH)
	
	populates the chi partner list, sets canChi flag, and returns true if chi type is possible
	
	
	if (candidate is an honor tile): return false
	partnerIndex1 = partnerIndex2 = NOT_FOUND
	
	desiredID1 and desiredID2 = IDs of the tiles that form the specififed chi type with candidate
	if (candidate cannot form the specified chi type, ie: ChiH with M1): return false
	
	partnerIndex1 and partnerIndex2 = search hand for desiredIDs, take first occurence of each
	if (indexes were found for both partners)
		set appropriate canChi flag
		store partner indices in appropriate chiPartnerIndices list
		can = true
	end if
	return can
	*/
	private boolean __canChiType(int chiType){
		
		//if true, the player definitely CAN make a chi
		boolean can = false;
		int tID = mCallCandidate.getId();
		int partnerIndex1 = NOT_FOUND, partnerIndex2 = NOT_FOUND;
		int desiredID1 = 0, desiredID2 = 0;
		
		//can't chi on an honor tile, return false
		if (mCallCandidate.isHonor()) return false;
		
		//decide who the partners should be, based on chi type
		if (chiType == Meld.MELD_TYPE_CHI_L && !(mCallCandidate.getFace() == '8' || mCallCandidate.getFace() == '9'))
			{desiredID1 = tID + 1; desiredID2 = tID + 2;}
		else if (chiType == Meld.MELD_TYPE_CHI_M && !(mCallCandidate.getFace() == '1' || mCallCandidate.getFace() == '9'))
			{desiredID1 = tID - 1; desiredID2 = tID + 1;}
		else if (chiType == Meld.MELD_TYPE_CHI_H && !(mCallCandidate.getFace() == '1' || mCallCandidate.getFace() == '2'))
			{desiredID1 = tID - 2; desiredID2 = tID - 1;}
		else return false;
		//return false if a chi cannot be made with the tile 
		
		
		//search the hand for the desired chi partners (get the indices)
		partnerIndex1 = mTiles.indexOf(new Tile(desiredID1));
		partnerIndex2 = mTiles.indexOf(new Tile(desiredID2));
		
		
		if (partnerIndex1 != NOT_FOUND && partnerIndex2 != NOT_FOUND)
		{
			//store the indices in the appropriate partners list
			ArrayList<Integer> storeHere = null;
			if (chiType == Meld.MELD_TYPE_CHI_L){
				storeHere = mPartnerIndicesChiL;
				can = mCanChiL = true;
			}
			else if (chiType == Meld.MELD_TYPE_CHI_M){
				storeHere = mPartnerIndicesChiM;
				can = mCanChiM = true;
			}
			else if (chiType == Meld.MELD_TYPE_CHI_H){
				storeHere = mPartnerIndicesChiH;
				can = mCanChiH = true;
			}
			
			//sore the indices of the partners in a partner list
			__storePartnerIndices(storeHere, partnerIndex1, partnerIndex2);
		}
		
		return can;
	}
	
	//done
	private boolean __canChiL(){
		return __canChiType(Meld.MELD_TYPE_CHI_L);
	}
	private boolean __canChiM(){
		return __canChiType(Meld.MELD_TYPE_CHI_M);
	}
	private boolean __canChiH(){
		return __canChiType(Meld.MELD_TYPE_CHI_H);
	}
	
	